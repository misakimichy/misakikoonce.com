<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Misaki Koonce]]></title><description><![CDATA[Software Engineer. From Tokyo Now in Seattle. I like developing application with React.]]></description><link>https://misakikoonce.com</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 11 Aug 2020 06:35:02 GMT</lastBuildDate><item><title><![CDATA[HTML Canvas Project]]></title><description><![CDATA[Draw whatever you want in the canvas using the mouse! This is one of the projects of Vanilla JavaScript 30 challenge by Wes Bos. Canvasâ€¦]]></description><link>https://misakikoonce.com/html-canvas-project/html-canvas-project</link><guid isPermaLink="false">https://misakikoonce.com/html-canvas-project/html-canvas-project</guid><pubDate>Tue, 28 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Draw whatever you want in the canvas using the mouse!&lt;/p&gt;
&lt;p&gt;This is one of the projects of &lt;a href=&quot;https://javascript30.com&quot;&gt;Vanilla JavaScript 30 challenge by Wes Bos&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Canvas&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;&amp;#x3C;canvas&gt;&lt;/code&gt; tag lets you create a canvas in HTML. You need to specify the canvas width and height, so as Context type. The context for canvas is &lt;code&gt;2D&lt;/code&gt; or &lt;code&gt;3D&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this project, I set the canvas width equals to &lt;code&gt;window.innerWidth&lt;/code&gt; and height equals to &lt;code&gt;window.innerHeight&lt;/code&gt;. To grab the value of &lt;code&gt;window.innerWidth&lt;/code&gt; and &lt;code&gt;window.innerHeight&lt;/code&gt;, The entire screen size of the web browser itself becomes a canvas.&lt;/p&gt;
&lt;h1&gt;How to draw on Canvas&lt;/h1&gt;
&lt;p&gt;I set four event listeners to the canvas. &lt;/p&gt;
&lt;p&gt;The first event listener tracks the cursor coordinates in the canvas. Depends where your cursor is, the color will change too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const updateCords = (e, mouse, lastMouse, ctx) =&gt; {
    lastMouse.x = mouse.x;
    lastMouse.y = mouse.y;
    mouse.x = e.pageX - e.currentTarget.offsetLeft;
    mouse.y = e.pageY - e.currentTarget.offsetTop;

    updateColor(lastMouse.x, lastMouse.y, ctx);
};

const updateColor = (x, y, ctx) =&gt; {
    let color = (x + y) / 2;
    ctx.strokeStyle = `hsl(${color}, 100%, 50%)`;
};

canvas.addEventListener(&apos;mousemove&apos;, (e) =&gt; updateCords(e, mouse, lastMouse, ctx));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The value of &lt;code&gt;mouse&lt;/code&gt; and &lt;code&gt;lastMouse&lt;/code&gt; coordinates are set (0, 0) for both at the beginning of IIFE.
As you can see, every mouse move in the window invokes the &lt;code&gt;updateCords()&lt;/code&gt; function, which takes &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;mouse&lt;/code&gt;, &lt;code&gt;lastMouse&lt;/code&gt; and &lt;code&gt;ctx&lt;/code&gt;. Those are the elements that &lt;code&gt;window&lt;/code&gt; has. You can see the value of &lt;code&gt;e&lt;/code&gt; to replace &lt;code&gt;updateCords(e, mouse, lastMouse, ctx)&lt;/code&gt; with  &lt;code&gt;console.log(e)&lt;/code&gt; in the developer tool.
&lt;code&gt;updateColor()&lt;/code&gt; function is also invoked inside of &lt;code&gt;updateCords()&lt;/code&gt; function. To change color by coordinates, I applied the of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates to hsl of &lt;code&gt;crx.strokeStyle&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;The second event listener listens to &lt;code&gt;mousedown&lt;/code&gt; event and add invoke &lt;code&gt;draw()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    const draw = () =&gt; {
        ctx.beginPath();
        ctx.moveTo(lastMouse.x, lastMouse.y);
        ctx.lineTo(mouse.x, mouse.y);
        ctx.closePath();
        ctx.stroke();
    };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function will tell &lt;code&gt;ctx&lt;/code&gt; a starting point then the coordinates to move to, then draw a line between the starting point and the point the mouse moves to. Since every mouse move updates &lt;code&gt;mouse(x, y)&lt;/code&gt; and &lt;code&gt;lastMouse(x, y)&lt;/code&gt;, as far as you drug on the canvas, a line will be drawn.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Brown and Cony]]></title><description><![CDATA[Please hover over the Brown's face then hover over the right area of him! (Brown is the name of the brown bear.) This is the very firstâ€¦]]></description><link>https://misakikoonce.com/brown-and-cony/brown-and-cony</link><guid isPermaLink="false">https://misakikoonce.com/brown-and-cony/brown-and-cony</guid><pubDate>Sat, 04 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Please hover over the Brown&apos;s face then hover over the right area of him! (Brown is the name of the brown bear.)&lt;/p&gt;
&lt;p&gt;This is the very first project in my coding life! After I learned HTML and CSS online, I decided to create a cute project to practice the knowledge.
Those characters are Brown and Cony from &lt;a href=&quot;https://line.me/en/&quot;&gt;LINE&lt;/a&gt;, and they are a cute coupleðŸ˜»&lt;/p&gt;
&lt;h1&gt;How to create Brown&lt;/h1&gt;
&lt;p&gt;Did you see that Brown inclines his head and also a speech bubble? Isn&apos;t this cute?&lt;/p&gt;
&lt;p&gt;I used &lt;code&gt;&amp;#x3C;div&gt;&lt;/code&gt;s for all of the parts besides eyes then styled with CSS. His eyes are created with an unordered list with two empty list items. Use &lt;code&gt;border-radius&lt;/code&gt; to make content round, apply color with &lt;code&gt;background-color&lt;/code&gt;. For the code sustainability, save the colors in &lt;code&gt;:root&lt;/code&gt;. &lt;code&gt;:root&lt;/code&gt; comes the very beginning of the &lt;code&gt;.css&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root {
    --maincolor: #6f4343;
    --conycolor: #fffff8;
    --conyoutline: #645e5e;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this project, I have three colors saved in &lt;code&gt;:root&lt;/code&gt;. When you want to change the color, all you need to do is just updating the color in &lt;code&gt;:root&lt;/code&gt; instead of checking and changing all colors in the codeÂ ðŸ™Œ&lt;/p&gt;
&lt;p&gt;You can also set sizes in &lt;code&gt;:root&lt;/code&gt;, for example, set your &lt;code&gt;&amp;#x3C;h1&gt;&lt;/code&gt; - &lt;code&gt;&amp;#x3C;h5&gt;&lt;/code&gt; font-size or &lt;code&gt;margin&lt;/code&gt; size and use it repeatedly in the project.&lt;/p&gt;
&lt;h2&gt;How to apply &lt;code&gt;:root&lt;/code&gt; value in CSS&lt;/h2&gt;
&lt;p&gt;You can apply the value to the element using the keyword &lt;code&gt;var&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.face {
    background-color: var(--maincolor);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the &lt;code&gt;.face&lt;/code&gt; background-color is &lt;code&gt;--maincolor&lt;/code&gt;, which is &lt;code&gt;#6f4343!&lt;/code&gt; You can just swap the color name (&lt;code&gt;background-color: #6f4343&lt;/code&gt;) with &lt;code&gt;background-color: var(value-name)&lt;/code&gt;ðŸ¥³&lt;/p&gt;
&lt;h2&gt;How to create a speech bubble&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leaverou.github.io/bubbly&quot;&gt;leaverou.github.io&lt;/a&gt; is my speech bubble reference. This tutorial is really simple, and it&apos;s helpful to understand how to create a speech bubble in CSS; I highly recommend playing around in this tutorial page.&lt;/p&gt;
&lt;p&gt;I used a &lt;code&gt;&amp;#x3C;div&gt;&lt;/code&gt; and pseudo-selectors, &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; to create this speech bubble. &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; (it&apos;s also written with two colons like &lt;code&gt;::before&lt;/code&gt;/ &lt;code&gt;::after&lt;/code&gt;) creates pseudo-elements that allows you to insert contents without HTML element. &lt;/p&gt;
&lt;p&gt;According to &lt;a href=&quot;https://developer.mozilla.org&quot;&gt;Mozilla.org&lt;/a&gt;, &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is often used to add cosmetic content to an element with the &lt;code&gt;content&lt;/code&gt; property. It is inline by default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;How to create Cony&lt;/h1&gt;
&lt;p&gt;The techniques are really similar to Brown&apos;s. I just created different shapes in different sizes.&lt;/p&gt;
&lt;h2&gt;How to create a heart?&lt;/h2&gt;
&lt;p&gt;To create a heart, I combined one square and two circles.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a square then tilt it 45 degrees.&lt;/li&gt;
&lt;li&gt;Then use &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; pseudo selector and create two circles. Since those elements have a width of the square, I set width and height 100%.&lt;/li&gt;
&lt;li&gt;Place one circle to the top left of the square perimeter which becomes the circle&apos;s diameter, and another circle to the top right.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tad-dah - It&apos;s a heart nowðŸ§¡&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Project Miguel]]></title><description><![CDATA[This is my second pure CSS project, hedgehog Miguel. I created this project to have better understanding for animation, SVG and to test howâ€¦]]></description><link>https://misakikoonce.com/project-miguel/project-miguel</link><guid isPermaLink="false">https://misakikoonce.com/project-miguel/project-miguel</guid><pubDate>Wed, 17 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is my second pure CSS project, hedgehog Miguel. I created this project to have better understanding for animation, SVG and to test how much I can create and design with pure CSS.&lt;/p&gt;
&lt;h2&gt;How to create spines&lt;/h2&gt;
&lt;p&gt;I used &lt;strong&gt;font-awesome&lt;/strong&gt; for spines. I applied two certificate icons for head and body using &lt;code&gt;&amp;#x3C;i&gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;h2&gt;How to create face&lt;/h2&gt;
&lt;p&gt;Those ears, eyes and nose are empty DOM element and set the size and color in CSS. I created paired items, ears and eyes, using unordered list so that it&apos;s going to easy to style them together. &lt;/br&gt;
I used SVG to create a cute little smile.&lt;/p&gt;
&lt;h2&gt;How to create the moving feet&lt;/h2&gt;
&lt;p&gt;Those tootsies are all &lt;code&gt;&amp;#x3C;div&gt;&lt;/code&gt;s. The reason I didn&apos;t use list is that I could add different animation for each of them and I could enjoy the different movesðŸ˜½
&lt;/br&gt;&lt;/br&gt;
The original positions are set used &lt;code&gt;transform: rotate(Xdeg);&lt;/code&gt;. Then I added animation for 5000 millisecond. Within the 5 second, those little feet moves back and forth because I change the &lt;code&gt;transform: rotate(Xdeg)&lt;/code&gt; in every 20% of the time.&lt;/p&gt;</content:encoded></item></channel></rss>