<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Misaki Koonce]]></title><description><![CDATA[Web Developer in training. Originally from Tokyo and now in Seattle. I enjoy frontend software development.]]></description><link>https://misakikoonce.com</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 07 Jan 2020 05:49:18 GMT</lastBuildDate><item><title><![CDATA[Brown and Cony]]></title><description><![CDATA[Please hover over the Brown face then hover over the right area of him! (Brown is the name of the brown bear.) This is the very firstâ€¦]]></description><link>https://misakikoonce.com/brown-and-cony/brown-and-cony/</link><guid isPermaLink="false">https://misakikoonce.com/brown-and-cony/brown-and-cony/</guid><pubDate>Sat, 04 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Please hover over the Brown face then hover over the right area of him! (Brown is the name of the brown bear.)&lt;/p&gt;
&lt;p&gt;This is the very first project in my coding life! After I learnt HTML and CSS online, I decided to create a cute project to practice them.
Those characters are Brown and Cony from &lt;a href=&quot;https://line.me/en/&quot;&gt;LINE&lt;/a&gt;, which is my favorite messaging app. They are a cute coupleðŸ˜»&lt;/p&gt;
&lt;h2&gt;How to create Brown&lt;/h2&gt;
&lt;p&gt;Did you see that Brown inclines his head and also a speech bubble? Isn&apos;t this cute?&lt;/p&gt;
&lt;p&gt;I used &lt;code&gt;&amp;#x3C;div&gt;&lt;/code&gt;s for all of the parts besides eyes then styled with CSS. His eyes are created with an unordered list with two empty list items. Use &lt;code&gt;border-radius&lt;/code&gt; to make content round, apply color with &lt;code&gt;background-color&lt;/code&gt;. For the code sustainability, save the colors you use more than once in CSS in &lt;code&gt;:root&lt;/code&gt;. &lt;code&gt;:root&lt;/code&gt; is very helpful in CSS. &lt;code&gt;:root&lt;/code&gt; helps you to create your template of color and sizes.&lt;/p&gt;
&lt;h3&gt;How to save value in :root&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;:root&lt;/code&gt; comes the the very beginning of the &lt;code&gt;.css&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root {
    --maincolor: #6f4343;
    --conycolor: #fffff8;
    --conyoutline: #645e5e;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this project, I have three colors saved in &lt;code&gt;:root&lt;/code&gt;, &lt;code&gt;--maincolor&lt;/code&gt;, the main brown color, &lt;code&gt;--conycolor&lt;/code&gt;, the main Cony&apos;s white color, and &lt;code&gt;--conyoutline&lt;/code&gt;, the outline color for Cony. To set color in &lt;code&gt;:root&lt;/code&gt;, when you want to change the color, all you need to do is update the hex in here instead of changing all colors in the codeÂ ðŸ™Œ&lt;/p&gt;
&lt;p&gt;I didn&apos;t used it in this project but you can also set sizes in &lt;code&gt;:root&lt;/code&gt;, for example, set the your &lt;code&gt;&amp;#x3C;h1&gt;&lt;/code&gt; - &lt;code&gt;&amp;#x3C;h5&gt;&lt;/code&gt; font-size or &lt;code&gt;margin&lt;/code&gt; size.&lt;/p&gt;
&lt;h3&gt;How to apply :root value in CSS&lt;/h3&gt;
&lt;p&gt;You can apply the value using the keyword &lt;code&gt;var&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.face {
    background-color: var(--maincolor);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the &lt;code&gt;.face&lt;/code&gt; background-color is &lt;code&gt;--maincolor&lt;/code&gt;, which is #6f4343! You can just swap the color name (&lt;code&gt;background-color: brown&lt;/code&gt;) with &lt;code&gt;var(value-name)&lt;/code&gt;ðŸ¥³&lt;/p&gt;
&lt;h2&gt;How to create a speech bubble&lt;/h2&gt;
&lt;p&gt;I used a &lt;code&gt;&amp;#x3C;div&gt;&lt;/code&gt; and pseudo selectors, &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; to create this speech bubble. &lt;/p&gt;
&lt;h2&gt;How to create Cony&lt;/h2&gt;
&lt;p&gt;The techniques are similar as Brown. I just created different shapes.&lt;/p&gt;
&lt;h2&gt;How to create a heart?&lt;/h2&gt;
&lt;p&gt;I combined one square, and two circles to create a heartðŸŸ¥ðŸ”´ðŸ”´ Create a square then tilt it 45 degrees. Then use &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; pseudo selector and create two circles. Since those elements&apos; have width of the square, I set width and height 100%. Place one circle to the top left of the square perimeter which becomes the circle&apos;s diameter, and the other to the top right. Tad-dah!!!! It&apos;s a heart now!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Project Miguel]]></title><description><![CDATA[This is my second pure CSS project, hedgehog Miguel. I created this project to have better understanding for animation, SVG and to test howâ€¦]]></description><link>https://misakikoonce.com/project-miguel/project-miguel/</link><guid isPermaLink="false">https://misakikoonce.com/project-miguel/project-miguel/</guid><pubDate>Wed, 17 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is my second pure CSS project, hedgehog Miguel. I created this project to have better understanding for animation, SVG and to test how much I can create and design with pure CSS.&lt;/p&gt;
&lt;h2&gt;How to create spines&lt;/h2&gt;
&lt;p&gt;I used &lt;strong&gt;font-awesome&lt;/strong&gt; for spines. I applied two certificate icons for head and body using &lt;code&gt;&amp;#x3C;i&gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;h2&gt;How to create face&lt;/h2&gt;
&lt;p&gt;Those ears, eyes and nose are empty DOM element and set the size and color in CSS. I created paired items, ears and eyes, using unordered list so that it&apos;s going to easy to style them together. &lt;/br&gt;
I used SVG to create a cute little smile.&lt;/p&gt;
&lt;h2&gt;How to create the moving feet&lt;/h2&gt;
&lt;p&gt;Those tootsies are all &lt;code&gt;&amp;#x3C;div&gt;&lt;/code&gt;s. The reason I didn&apos;t use list is that I could add different animation for each of them and I could enjoy the different movesðŸ˜½
&lt;/br&gt;&lt;/br&gt;
The original positions are set used &lt;code&gt;transform: rotate(Xdeg);&lt;/code&gt;. Then I added animation for 5000 millisecond. Within the 5 second, those little feet moves back and forth because I change the &lt;code&gt;transform: rotate(Xdeg)&lt;/code&gt; in every 20% of the time.&lt;/p&gt;</content:encoded></item></channel></rss>