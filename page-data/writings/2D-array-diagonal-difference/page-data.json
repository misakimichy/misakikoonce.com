{"componentChunkName":"component---src-templates-writing-template-js","path":"/writings/2D-array-diagonal-difference","result":{"data":{"markdownRemark":{"html":"<p>This <a href=\"https://www.hackerrank.com/challenges/diagonal-difference/problem\">diagonal difference</a> quiz is from HackerRank, Basic level of Problem Solving.</p>\n<h4>Input</h4>\n<p>You are given a 2D array that inner and outer arrays are the same length. The inner array has integers, and the integers constraints are from -100 to 100.</p>\n<h4>Output</h4>\n<p>Return the absolute difference between the sums of the matrix's two diagonals as a single integer.</p>\n<h3>How I solved this</h3>\n<p>Let me explain what a 2D array is before showing my solution.</p>\n<h4>2 dimensional array</h4>\n<p>When you face 2D array ,which is an array of arrays, it represents a table with rows and columns; outer array length is the number of rows of a matrix, and the inner array length is the numbers of columns of  a matrix.\nFor example, the matrix of 2D array <code>[[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, 1, 2]]</code> is going to be:</p>\n<deckgo-highlight-code   theme=\"synthwave\" >\n          <code slot=\"code\">*  *  *\n1, 2, 3 #\n4, 5, 6 #\n9, 8, 7 #\n0, 1, 2 #\n\n// * is column\n// # is row</code>\n        </deckgo-highlight-code>\n<h3>Solution</h3>\n<p>In this problem, the outer and inner arrays always have the same length, you can calculate the diagonals of length x length matrix.\nMy solution that passed all test of HackerRank:</p>\n<deckgo-highlight-code   theme=\"synthwave\" >\n          <code slot=\"code\">const absDiagonalDifference = arr =&gt; {\n    let diago1 = 0;\n    let diago2 = 0;\n  for (let i = 0; i &lt; arr.length; i++) {\n    diago1 += arr[i][i];\n    diago2 += arr[i][arr.length - i - 1];\n  }\n    return Math.abs(diago1 - diago2);\n};</code>\n        </deckgo-highlight-code>\n<p>Let's test this:</p>\n<deckgo-highlight-code   theme=\"synthwave\" >\n          <code slot=\"code\">const test = [[1,2,3], [4,5,6], [9,8,7]];\nabsDiagonalDifference(test)l;</code>\n        </deckgo-highlight-code>\n<p><br>\nThis is going to be 3 x 3 matrix:</p>\n<deckgo-highlight-code   theme=\"synthwave\" >\n          <code slot=\"code\">1, 2, 3\n4, 5, 6\n9, 8, 7</code>\n        </deckgo-highlight-code>\n<p><br>\nWhat you need is the sum of diagonals, <code>1 + 5 + 7</code> and <code>3 + 5 + 9</code>.\nTo explain this problem easier, I name top left to bottom right diagonal <code>diago1</code> and top right to bottom left diagonal <code>diago2</code>.\n<br>\n<br>\nTo calculate the sum of <code>diago1</code>, you need to get the first element in the first array, the second element in the second array, and the last element in the last array. This sounds easy because I can use the same index to access the inner array element as the outer array index.\n<br>\n<br>\nWhen it's <code>i = 0</code>, <code>diago1</code> points <code>arr[0][0]</code>, which means first row and first column, which is <code>1</code>. Diago1 is currently equal to 1.\nThen index increases by one and now <code>i = 1</code>. This is accessing <code>arr[1][1]</code>, which is second row and second column, <code>5</code>. Now <code>diago2 = 1 + 5</code>;\n<br>\nLike this, from top left to bottom right diagonal get calculated in a simple way.\n<br>\n<br>\n<br>\nI confused a little to think of how to orderly iterate from the last element to the first element by rows, for example, in this 3x3 example, I want to access the last element of an inner array, then second last from the second array, then the first element of the last array.\n<br>\nI know that <code>[array.length - 1]</code> is the way to access the last element of an array, and <code>[array.length - 2]</code> is to access the second to last element of the array. We can use this!\n<br>\nAll I need to do is dynamically calculate this using <code>array.length</code> and <code>i</code>, which going to be <code>[array.length - i - 1]</code>.\nWhen it's on the first <code>arr[0]</code>, it accesses the last column, <code>arr[0][2]</code>, which is a result of 3 - 0 - 1.\n<br>\nThen the index increases by one and now <code>i = 1</code>. This is accessing <code>arr[1][1]</code>, which is a result of 3 - 1 - 1.\n<br>\nThen index increases again, <code>i = 2</code>, then now it's <code>arr[2][0]</code>, which is a result of 3 - 2 - 1.\n<br>\n<br>\n<br>\nVoilaðŸ¥³\n<br>\n<br>\nAs you can expect, this solution will work with 4x4, 5x5, 6x6... matrix!</p>","frontmatter":{"date":"October 21, 2020","path":"/writings/2D-array-diagonal-difference","title":"2D array diagonal difference - HackerRank","stackTags":["Data Structure","JavaScript"]}}},"pageContext":{"title":"/Users/misakimichy/src/misakikoonce.com/src/pages/writings.js"}},"staticQueryHashes":["2330788219"]}